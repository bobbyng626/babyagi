import re
from typing import Dict, List
from utils import OpenAIQuery
from .task_agent import TaskAgent
from langchain.callbacks import get_openai_callback

class TaskExecutionAgent:
  @classmethod
  # Execute a task based on the objective and five previous tasks
  def execution_agent(cls, objective: str, task: str, context: str) -> str:
      """
      Executes a task based on the given objective and previous context.

      Args:
          objective (str): The objective or goal for the AI to perform the task.
          task (str): The task to be executed by the AI.

      Returns:
          str: The response generated by the AI for the given task.

      """

      # print("\n****RELEVANT CONTEXT****\n")
      # print(context)
      # print('')
      prompt = f'Perform one task based on the following objective: {objective}.\n'
      if context:
          prompt += 'Take into account these previously completed tasks:' + '\n'.join(context)
      prompt += f'\nYour task: {task}\nResponse:'
      agent = TaskAgent.task_agent()
      with get_openai_callback() as cb:
          response = agent.run(input=prompt)
      return response
      # prompt += f"\nYour Task: {task}\nResponse:"
      # return OpenAIQuery.generate_response(prompt, max_completion_token=2000)

